{"version":3,"sources":["Components/Counter.js","Components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","style","display","justifyContent","alignContent","height","border","flexDirection","textTransform","numString","count","htmlFor","onClick","incrementCount","margin","decrementCount","ErrorBoundary","color","App","prevState","state","axios","get","then","res","setState","data","console","log","catch","err","error","hasError","info","this","nextProps","nextState","className","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3609593.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Counter(props) {\n  function handleDecrementCount() {\n    return props.decrementCount();\n  }\n  function handleIncrementCount() {\n    // props.this.setState({count: props.this.state.count += 1});\n    return props.incrementCount();\n  }\n  return (\n    <div \n      style={{\n        display: \"flex\", \n        justifyContent: \"center\", \n        alignContent: \"center\", \n        height: \"100vh\", \n        border: \"1px solid black\", \n        flexDirection: \"column\"}}\n    > \n      <span\n        style={{\n          textTransform: \"capitalize\"\n        }}\n      >\n        {props.numString}\n        ... {props.count}\n      </span>\n      <div>\n        <label \n          htmlFor=\"Increment\"\n        >\n          Increment Count\n        </label>\n        <button \n          onClick={handleIncrementCount}\n          style={{height: \"30px\", margin: 20}}\n        >\n          Increment count (click)\n        </button>\n      </div>\n      <div>\n        <label \n          htmlFor=\"Decrement\"\n        >\n          Decrement Count\n        </label>\n        <button \n          onClick={handleDecrementCount}\n          style={{height: \"30px\", margin: 20}}\n        >\n          Decrement count (click)\n        </button>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\n\nexport default function ErrorBoundary(props) {\n  return (\n    <div\n    style={{\n      display: \"flex\", \n      justifyContent: \"center\", \n      alignContent: \"center\", \n      height: \"100vh\", \n      border: \"1px solid black\", \n      flexDirection: \"column\",\n      color: \"red\"\n    }}\n    >\n      <h4>Error Loading Counter</h4>\n    </div>\n  )\n}","import React from 'react';\nimport Counter from \"./Components/Counter.js\";\nimport ErrorBoundary from \"./Components/ErrorBoundary.js\";\nimport axios from \"axios\";\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor() { // lifecycle method, runs only once before mounting the component and initializes the components state if present.\n    super();\n    this.state = {\n      count: 0,\n      numString: \"\",\n      hasError: false,\n      error: \"\",\n      info: \"\"\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true, error, info}, () => console.error(this.state.error, this.state.info));\n  }\n\n  componentDidMount() { // runs everytime component mounts, and is the perfect place to place API calls since the DOM has been loaded but not yet rendered to the page.\n    axios\n      .get(`http://numbersapi.com/${this.state.count}/trivia?notfound=floor&fragment`)\n      .then(res => this.setState({numString: res.data, count: 0}, () => console.log(this.state.numString)))\n      .catch(err => console.error(err));\n  }\n\n  incrementCount = () => {\n    const prevState = this.state;\n    if (prevState.count < 107) {\n      axios\n      .get(`http://numbersapi.com/${this.state.count}/trivia?notfound=floor&fragment`)\n      .then(res => this.setState({numString: res.data, count: prevState.count += 1}, () => console.log(this.state.numString)))\n      .catch(err => console.error(err));\n    }\n  }\n  \n  decrementCount = () => {\n    const prevState = this.state;\n    if (prevState.count > 0) {\n      axios\n      .get(`http://numbersapi.com/${this.state.count}/trivia?notfound=floor&fragment`)\n      .then(res => this.setState({numString: res.data, count: prevState.count -= 1}, () => console.log(this.state.numString)))\n      .catch(err => console.error(err));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.count === this.state.count) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() { // render is the only required method\n    return (\n      <div className=\"App\">\n        {\n          this.state.hasError ?\n          <ErrorBoundary /> :\n          <Counter numString={this.state.numString} this={this} count={this.state.count} incrementCount={this.incrementCount} decrementCount={this.decrementCount} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}